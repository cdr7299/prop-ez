// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/pnrisma-schema

enum Role {
  ADMIN
  BASIC
}

enum CustomerType {
  buyer
  seller
  both
}

enum Priority {
  low
  medium
  high
}

enum PropertyStatus {
  on_market
  off_market
  deal_in_progress
  done
  archived
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App models

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  properties         PropertyItem[]
  role               Role                 @default(BASIC)
  UserPreference     UserPreference?
  Locations          Locations[]
  Category           Category[]
  BrokerEntity       BrokerEntity[]
  CategoryConfig     CategoryConfig[]
  CustomerPreference CustomerPreference[]
  Customer           Customer[]

  @@index([email])
}

model UserPreference {
  id           String   @id @default(cuid())
  emailUpdates Boolean? @default(false)
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
}

model PropertyItem {
  id               String         @id @default(cuid())
  title            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  address          String
  tehsil           String?
  city             String?
  state            String?
  createdBy        User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById      String
  length           Float?
  width            Float?
  floors           Int
  Category         Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId       String
  priority         Priority?
  status           PropertyStatus @default(on_market)
  location         Locations      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId       String
  broker           BrokerEntity?  @relation(fields: [brokerEntityId], references: [id])
  brokerEntityId   String?
  pricePerSqFt     Float?
  askingPrice      Float?
  priceSoldAt      Float?
  interestedBuyers Customer[]     @relation("IsBuyingProperties")
  seller           Customer?      @relation("IsSellingProperties", fields: [sellerId], references: [id])
  sellerId         String?
  manualPricing    Boolean        @default(false)
}

model Customer {
  id                   String              @id @default(cuid())
  customerType         CustomerType        @default(buyer)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  createdBy            User                @relation(fields: [createdById], references: [id])
  createdById          String
  name                 String
  phoneNumber          String?
  email                String?
  isSellingProperties  PropertyItem[]      @relation("IsSellingProperties")
  isBuyingProperties   PropertyItem[]      @relation("IsBuyingProperties")
  customerPreferenceId String?
  CustomerPreference   CustomerPreference?
}

model CustomerPreference {
  id           String   @id @default(cuid())
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdById  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  Customer     Customer @relation(fields: [customerId], references: [id])
  customerId   String   @unique
  minPrice     Float?
  maxPrice     Float?
  minArea      Float?
  maxArea      Float?
  minFloors    Int?
  pricePerSqFt Float?
  maxLength    Float?
  maxWidth     Float?
}

model Locations {
  id          String         @id @default(cuid())
  name        String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
  properties  PropertyItem[]
  createdBy   User           @relation(fields: [createdById], references: [id])
  createdById String

  @@unique([name, createdById])
}

model Category {
  id             String          @id @default(cuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  properties     PropertyItem[]
  createdBy      User            @relation(fields: [createdById], references: [id])
  createdById    String
  CategoryConfig CategoryConfig?

  @@unique([name, createdById])
  @@index([name, createdById])
}

model CategoryConfig {
  id                  String   @id @default(cuid())
  defaultWidth        Float
  defaultLength       Float
  Category            Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId          String   @unique
  createdBy           User     @relation(fields: [createdById], references: [id])
  createdById         String
  fillPrice           Boolean  @default(true)
  fillDefaultFields   Boolean  @default(true)
  defaultFloors       Int
  defaultPricePerSqFt Float
}

model BrokerEntity {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  name         String         @unique
  createdBy    User           @relation(fields: [createdById], references: [id]) //createdBy
  createdById  String
  phoneNumber  String?
  PropertyItem PropertyItem[]
}
