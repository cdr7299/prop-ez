// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/pnrisma-schema

enum Role {
  ADMIN
  BASIC
}

enum Priority {
  low
  medium
  high
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App models

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  posts          Post[]
  properties     PropertyItem[]
  role           Role            @default(BASIC)
  UserPreference UserPreference?
  Locations      Locations[]
  Category       Category[]
  BrokerEntity   BrokerEntity[]

  @@index([email])
}

model UserPreference {
  id           String   @id @default(cuid())
  emailUpdates Boolean?
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
}

model PropertyItem {
  id             String        @id @default(cuid())
  title          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  address        String        @unique
  createdBy      User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById    String
  length         Float?
  width          Float?
  floors         Int
  Category       Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     String
  priority       Priority?
  status         Status?       @relation(fields: [statusId], references: [id])
  statusId       String?
  location       Locations     @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId     String
  broker         BrokerEntity? @relation(fields: [brokerEntityId], references: [id])
  brokerEntityId String?
  pricePerSqFt   Float?
}

// TODO use createdBy rather than user & user userId

model Locations {
  id          String         @id @default(cuid())
  name        String         @unique
  properties  PropertyItem[]
  createdBy   User           @relation(fields: [createdById], references: [id])
  createdById String
}

// TODO use createdBy rather than user & user userId
model Category {
  id             String          @id @default(cuid())
  name           String          @unique
  properties     PropertyItem[]
  createdBy      User            @relation(fields: [createdById], references: [id])
  createdById    String
  CategoryConfig CategoryConfig?
}

model CategoryConfig {
  id         String   @id @default(cuid())
  floors     Int
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @unique
}

model Status {
  id         String         @id @default(cuid())
  name       String         @unique
  properties PropertyItem[]
}

model BrokerEntity {
  id           String         @id @default(cuid())
  name         String
  createdBy    User           @relation(fields: [createdById], references: [id]) //createdBy
  createdById  String
  phoneNumber  String?
  PropertyItem PropertyItem[]
}
